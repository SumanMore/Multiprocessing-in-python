When you work on a computer vision project, you probably need to preprocess a lot of image data.
This is time-consuming, and it would be great if you could process multiple images in parallel. 
Multiprocessing is the ability of a system to run multiple processors at one time. 
If you had a computer with a single processor, it would switch between multiple processes to keep all of them running.


What is Multiprocessing?
Multiprocessing in Python is a built-in package that allows the system to run multiple processes simultaneously. 
It will enable the breaking of applications into smaller threads that can run independently. 
The operating system can then allocate all these threads or processes to the processor to run them parallelly, thus improving the overall performance and efficiency.


Difference between multiprocessing and threading?
Threading:
1.A new thread is spawned within the exixting process.
2.Starting a thread is faster than starting a process.
3.Memory is shared between all the threads.
4.Mutexes often necessary to control access to shared data.
5.One Global Interpreter Lock(A lock that allows only one thread at a time to execute in python) for all threads.
6)Great for I/O bound tasks.

Multiprocessing:
1)A new process is started independent from other process.
2)Starting a process is slower than starting a thread.
3)Memory is not shared between the processes- Separate memory space
4)Mutexex not necessary.
5)One Global Interpreter Lock for each process.
6)Great for CPU Bound processing.



Benefits Of multiprocessing?
Multiprocessing can make a program substantially more efficient by running multiple tasks in parallel instead of sequentially.
A similar term is multithreading, but they are different.
A process is a program loaded into memory to run and does not share its memory with other processes.
A thread is an execution unit within a process. Multiple threads run in a process and share the process’s memory space with each other.
Python’s Global Interpreter Lock (GIL) only allows one thread to be run at a time under the interpreter, which means you can’t enjoy 
the performance benefit of multithreading if the Python interpreter is required. This is what gives multiprocessing an upper hand over threading in Python.
Multiple processes can be run in parallel because each process has its own interpreter that executes the instructions allocated to it. 
Also, the OS would see your program in multiple processes and schedule them separately, i.e., your program gets a larger share of computer resources in total. So, multiprocessing is faster when the program is CPU-bound. In cases where there is a lot of I/O in your program, threading may be more efficient because most of the time,
your program is waiting for the I/O to complete. However, multiprocessing is generally more efficient because it runs concurrently.



Structure Of a Multiprocessing Program in Python:
1)Firstly you need to write  “import multiprocessing”  to import the module.
2)Next, You need to create the Process class objects.The arguments passed in these objects :
target: The functions to be used
args: Arguments to be given in the functions
After the object construction, you must use the start() method to start the processes.
Lastly, you need to use the join() method to stop the current program’s execution until it executes the processes. 
Thus, the program will first process objects. It will then move back to the following statements of the running program.

 


To create a process, we simply say so using the multiprocessing module:
import multiprocessing
p1 = multiprocessing.Process(target=task)


to start the process
p1.start()

to join the process
p.join

